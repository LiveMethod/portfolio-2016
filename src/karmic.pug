extends ./_layout.pug

block body
  .container-fluid
    .row
      .default-text
        h1.text-center File Expenses Like It's 2016.
        p.text-center Winner: PayBefore awards 2016 Best In Show, Best Mobile App
    
    hr

    .row
      .default-text
        h2 The Premise:
        p When your employees want to buy something with company money, they get teleported to the 1960s.

        p There’s thermal paper everywhere, in person reporting, and a whole lot of waiting around hoping things don’t go sideways. Apps like Expensify only remedy the tail end of the process - reimbursement after the money is spent.

        p In the best case scenario, maybe you have a cash drawer, or a shared credit card that gets passed around.

        p
          strong Usually, employees have to float their own cash and hope they get paid back before rent’s due.

        p
          strong That sucks.

        p Karmic gives each employee a free debit card, and lets managers move money to and from those cards individually, with built in reporting and receipt management, so you can load your card, not your receipts, and spend money like it’s {$CURRENT_YEAR}
    
    hr

    .row
      h2.text-center Before Karmic
    .row
      .triplet
        //- Graphic Here
        
        h4.text-center Free-For-All Cash Management
      .triplet
        //- Graphic Here
        
        h4.text-center Back Wrecking Wallet Bulges
      .triplet
        //- Graphic Here
        
        h4.text-center Paper. Waiting. Strife.
    
    hr

    .row
      h2.text-center After Karmic
    .row
      .triplet
        //- Graphic Here
        
        h4.text-center Need Based Spending
      .triplet
        //- Graphic Here
        
        h4.text-center Photos, Not Paper
      .triplet
        //- Graphic Here
        
        h4.text-center Instant Access

    hr

    .row
      .default-text
        //- FIXME: handwriting font
        h2.handwriting "A reloadable Whatsit Now?"
        
        h2 UX Challenge: Demystifying Money Movement

        p Karmic is different from traditional corporate cards, and the concept of a reloadable, general purpose business prepaid card is frequently confusing for small business owners.

        p They’re not used to money being able to move to and from a card, instantly, and without fees.

        p Additionally, Karmic gets its funding from a company’s existing bank accounts, which adds another layer of conceptual complexity.

        h2 Human-Friendly Terminology

        p If everyday business owners were going to make sense of this, step one was to use language that didn’t scare people away.

        p The original version of Karmic (called Dash) used the same language with users that the engineers used internally, describing “Card Funding Events from the Primary Virtual Account” when they really meant  “sending money to a card”

        p We established a description of Karmic’s money movement model that used language that was easy to reason about, and mapped to real-world objects and concepts:

        //- Graphic here

    hr

    .row
      .default-text
        h1.text-center Iterating On Money Movement
        
        p This is the core interaction. The entire usefulness of Karmic’s app hinges on being able to do this one thing really well.

        p Employees ask for the funds they need, and managers send it to their cards on the spot.

    .row
      //- Graphic here

    hr

    .row
      .default-text
        h3 Version 0: The Ionic MVP

        p Version 0 was what engineering originally shipped before I joined the company, using the Ionic framework for the front end.

    .row
      //- Graphic here

    .row
      .default-text
        h3 V1: Modal

        p One early idea was a modal that was accessible anywhere in the app. It started with a search fior employees and a simple numpad, with a constantly present visual reminder of what the transaction would look like (user_foo &raquo; $n &raquo; user_bar)

        p The confirm dialog also contained a recap of the amount and recipient.

        p Much of this survived in some form to the final version.

    .row
      //- Graphic here

    .row
      .default-text
        h3 V2: Send vs Request Toggle

        p As we explored different visual design options, this was a pitch that adapted to a more material design style, and pared down a lot of what was in the original wires.

        p The big inclusions here are early in the flow -  a toggle between sending a requesting lets users accomplish two very similar actions with the same widget, and the subtitles on the user list gives context for that employee’s existing financial state.

    .row
      //- Graphic here

    .row
      .default-text
        h3 V2.5: Double Buttons

        p Instead of making the action decision upfront, we kept the interface as use-case-agnostic as possible, and let users choose the action at the end.
    .row
      //- Graphic here
    
    .row
      .col-xs-6.col-xs-offset-3
        //- Graphic Here
      .col-xs-12.col-xs-offset-1.xs-vertical-center
        p We also experimented with administrator’s ability to remove money from the same interface, outside of the normal send/request flow.

    hr

    .row
      .col-xs-12.col-xs-offset-1.xs-vertical-center
        h2 Concept Graveyard: Quick Add

        p A version of the employee list with a quick-add section up top to let employees make changes to their own card in the same place they modified others.

        p This layout was shelved because it felt weird to force two significantly different interfaces into a single view, especially when it means adding complexity to an otherwise very straightforward list view.
      .col-xs-6.col-xs-offset-2
        //- Graphic Here
    hr

    .row
      .default-text
        h3 V3: Calculator/Summary View

        p V3 started the send flow process with an empty version of the send summary screen, and persisted that summary as users filled in the various sections.

        p We experimented with a few variants of this layout, splitting sender and recipient horizontally vs vertically, etc.
    
    .row
      //- Graphic here

    hr

    .row
      .default-text
        h3 Hallway Testing: Long or Short?

        p At this point, we forked the send flow into two variants: One showed an updated summary of the inputs so far whenever a user finished an input. The other showed it only at the beginning and end.

        p I used invision to make a clickable prototype and ran it by everyone in the building, and the shorter flow won. People’s feedback was that the interactions are short enough that you can keep the summary in your head while you choose a person and enter a dollar amount - the cost of context switching from list to summary to calculator outweighed the increase in context.
    
    .row
      //- Graphic here

    hr

    .row
      .default-text
        h3 V4: Action Slider

        p A whole lot of discussion was had over this screen, and there was one piece of feedback that repeatedly cropped up:

        p Sometimes you want to send a certain amount, and other times you want to end up with a certain amount. It’s one of the reasons that earlier iterations of this flow included the employee’s current balance.

        p But we were still forcing people to do mental math if they wanted to base their send on the “ending with” amount.

        p This finally remedied that problem, and gave us a neat way to include the “remove” functionality from before at the same time.

        p There were also some tweaks to the summary on the calculator screen, stylizing them a little further.

    .row
      //- Graphic here

    hr

    .row
      .col-xs-7.col-xs-offset-3
        //- Graphic Here
      .col-xs-10.col-xs-offset-1
        h2 Try It!
        p Rather than write 3 more pages about edge cases and error handling, why don’t you just try to break it?

    hr

    .row
      .default-text
        h1.text-center Web App: Transaction View
        
        p The Karmic web app is, for the most part, a layout-adapted version of the mobile app, and is meant only as a supplement to the main mobile app. One place that shines, however, is the transaction view.

        p We used the extra space afforded by the larger screen to surface a ton of power-user functionality for the CFO/comptroller types. These users often asked us how to format their data in very detailed, company-specific ways - filtering by custom date ranges and sorting based on their individual accounting categories. Ask and ye shall receive. 

        //- Graphic Here

    .row
      .triplet
        //- Graphic Here

        h4 Advanced Filter &amp; Search
        
        p See events by category, or use search &amp; filter tools to drill down on specific transactions.
      .triplet
        //- Graphic Here

        h4 Employee Reminders
        
        p Issue reminders to employees whose transactions are missing data you need for complete accounting records.
      .triplet
        //- Graphic Here

        h4 Your Data Is Yours
        
        p Download your entire transaction history any time, for integration with Xero, Quickbooks, and other accounting software.

    .row
      .default-text
        h1.text-center The Evolution of the Guilloche

        //- Graphic Here

    .row
      .default-text
        p The Dash logo mark was developed by Williamson Adams before I joined the company. It was featured in the original card art, but I wanted to explore  a more modern look for the Karmic brand.

        p The Guilloche is a classic visual in finance design, having been added to bank notes throughout history as both ornament and forgery protection. Bank Simple has already aced the guilloche-as-logo, so I was forced to look for a separate solution. The answer ended up coming from the original Dash logo, turned spirograph-style in increments of n° 
        //- FIXME - n degrees

        //- Graphic Here - logo transition

        //- Graphic Here - Card on table
    
        p I also designed a moodboard that outlined where I hoped to take the Karmic brand, and while the business chose to stick with the existing brand assets, I’m including it anyway because I really like the way it turned out: 

        //- Graphic Here - full sized moodboard